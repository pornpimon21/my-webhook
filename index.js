require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const levenshtein = require('fast-levenshtein');
const Session = require('./models/session');
const EventLog = require('./models/eventLog');
const line = require('@line/bot-sdk');
const { SessionsClient } = require('@google-cloud/dialogflow');
const uuid = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;
//app.use(express.json());

const uri = process.env.MONGODB_URI;


const fs = require('fs');
const path = require('path');

const keyPath = path.join(__dirname, 'dialogflow-key.json');
if (!fs.existsSync(keyPath) && process.env.GOOGLE_CREDENTIALS_BASE64) {
  const buffer = Buffer.from(process.env.GOOGLE_CREDENTIALS_BASE64, 'base64');
  fs.writeFileSync(keyPath, buffer);
  console.log('‚úÖ Created dialogflow-key.json from base64!');
}
process.env.GOOGLE_APPLICATION_CREDENTIALS = keyPath;


mongoose.connect(uri)
.then(() => console.log('‚úÖ MongoDB connected!'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const lineClient = new line.Client(lineConfig);
const projectId = process.env.DIALOGFLOW_PROJECT_ID;
const sessionClient = new SessionsClient();

async function detectIntentText(sessionId, text, languageCode = 'th') {
  const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);
  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        text,
        languageCode,
      },
    },
  };

  const responses = await sessionClient.detectIntent(request);
  return responses[0].queryResult;
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
const faculties = [
  {
    name: '‡∏Ñ‡∏ì‡∏∞‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    majors: [
{
        name : '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢',
        grade : 2.75,
        ability : ['‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', '‡∏™‡∏≠‡∏ô', '‡∏Ñ‡∏£‡∏π', '‡∏£‡∏±‡∏Å‡πÄ‡∏î‡πá‡∏Å', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô', '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', '‡∏ß‡∏£‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏°', '‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô', '‡∏à‡∏±‡∏ö‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°', '‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á'],
        quota : 60,
        requiredEducation: ['‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢', '‡∏õ‡∏ß‡∏ä', '‡∏Å‡∏®‡∏ô'],
        condition : "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÄ‡∏Å‡∏£‡∏î‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 3.0",
        reason : '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡πâ‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
        careers: ["‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢","‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô","‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£"]
      },
      {
        name : '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', 
        grade : 2.50, 
        ability : ['‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡πÄ‡∏Ñ‡∏°‡∏µ', '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', '‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', '‡πÅ‡∏•‡πá‡∏ö'], 
        quota : 60, 
        requiredEducation: ['‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢', '‡∏õ‡∏ß‡∏ä'],
        condition : "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡πå-‡∏Ñ‡∏ì‡∏¥‡∏ï, ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        reason : '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ',
        careers: ["‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£","‡∏ô‡∏±‡∏Å‡πÄ‡∏Ñ‡∏°‡∏µ","‡∏ô‡∏±‡∏Å‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå"]
      }    
    ]
  },
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
function findClosestAbility(userInput, thresholdRatio = 0.5) {
  userInput = userInput.trim().toLowerCase();
  const allAbilities = [...new Set(faculties.flatMap(f => f.majors.flatMap(m => m.ability)))].map(a => a.trim().toLowerCase());

  if (allAbilities.includes(userInput)) return userInput;

  // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ (prefix match) ‡πÄ‡∏ä‡πà‡∏ô "‡∏Ñ‡∏ì‡∏¥‡∏ï" = "‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
  const prefixMatch = allAbilities.find(a => a.startsWith(userInput));
  if (prefixMatch) return prefixMatch;

  // üîç ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà userInput ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ (partial match)
  const partialMatch = allAbilities.find(a => a.includes(userInput));
  if (partialMatch) return partialMatch;

  // üß† ‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold ‡πÅ‡∏ö‡∏ö dynamic ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß input
  const threshold = Math.ceil(userInput.length * thresholdRatio);

  let closest = null, minDist = Infinity;
  for (const ability of allAbilities) {
    const dist = levenshtein.get(userInput, ability);
    if (dist < minDist) {
      minDist = dist;
      closest = ability;
    }
  }

  return minDist <= threshold ? closest : null;
}

//‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
function findMatchingMajors(grade, abilities, educationLevel) {
  let results = [];

  faculties.forEach(faculty => {
    faculty.majors.forEach(major => {
      if (grade < major.grade) return;

      if (!major.requiredEducation.includes(educationLevel)) return;

      const matchedAbilities = major.ability.filter(majorAbility => {
        return abilities.some(userAbility => {
          const dist = levenshtein.get(userAbility, majorAbility);
          const threshold = Math.ceil(Math.min(userAbility.length, majorAbility.length) / 2);
          return dist <= threshold;
        });
      });

      if (matchedAbilities.length === 0) return;

      results.push({
        faculty: faculty.name,
        major: major.name,
        matchedAbilities,
        condition: major.condition,
      });
    });
  });

  console.log('Matching majors:', results);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

  return results.sort((a, b) => b.score - a.score).slice(0, 5);
}
// MongoDB Session Helper
async function getSession(sessionId) {
  let session = await Session.findOne({ sessionId });
  if (!session) session = new Session({ sessionId });
  return session;
}
async function saveSession(session) {
  await session.save();
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session
async function updateSession(sessionId, data) {
  return Session.updateOne({ sessionId }, { $set: data }, { upsert: true });
}

// Webhook Endpoint
app.use('/webhook', express.json());
app.post("/webhook", async (req, res) => {
  const eventId = req.body.originalDetectIntentRequest?.payload?.data?.webhookEventId;

  if (eventId) {
    try {
      const exists = await EventLog.findOne({ eventId });
      if (exists) {
        return res.status(200).send(); // üõë ‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
      }
      await EventLog.create({ eventId }); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    } catch (err) {
      console.error("‚ùå EventLog error:", err.message);
    }
  }  
   const intent = req.body.queryResult?.intent?.displayName || "";
   const params = req.body.queryResult?.parameters || {};
   const sessionFull = req.body.session || "default-session";

   const sessionId = sessionFull.split('/').pop();  // ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà userId   
   const session = await getSession(sessionId);
   session.sessionId = sessionId;  // ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß  

  if (intent === "welcome") {
    return res.json({
      fulfillmentText: "üåü ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤ üéì\n\n‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"
    });
  }

  if (intent === "get name") {
    const name = params.name || "‡∏Ñ‡∏∏‡∏ì";
    session.name = name;
    await saveSession(session);
    return res.json({
    fulfillmentText: `‚ú® ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${name}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n(‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢, ‡∏õ‡∏ß‡∏ä, ‡∏õ‡∏ß‡∏™, ‡∏Å‡∏®‡∏ô)`
    });
  }

if (intent === "educationLevel") {
  const educationLevel = (params.educationLevel || "").toLowerCase();
  session.educationLevel = educationLevel;
  await saveSession(session);

  if (["‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢", "‡∏õ‡∏ß‡∏ä", "‡∏õ‡∏ß‡∏™", "‡∏Å‡∏®‡∏ô"].includes(educationLevel)) {
    return res.json({
      fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞",
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_grad`,
        lifespanCount: 2
      }]
    });
  } else {
    return res.json({
      fulfillmentText: "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢, ‡∏õ‡∏ß‡∏ä, ‡∏õ‡∏ß‡∏™, ‡∏Å‡∏®‡∏ô)",
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_education`,
        lifespanCount: 2
      }]
    });
  }
}

  if (intent === "get grade") {
    const grade = params.grade;
    if (typeof grade !== "number" || grade < 0 || grade > 4) {
      return res.json({
        fulfillmentText: "üìä ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0.0 - 4.0 ‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
      });
    }
    session.grade = grade;
    await saveSession(session);
    return res.json({
      fulfillmentText: `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î ${grade}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ ‡∏Å‡∏µ‡∏¨‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô üöÄ`,
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_skills`,
        lifespanCount: 2
      }]
    });
  }

if (intent === "get skills") {
  let abilities = params.ability;
  if (typeof abilities === "string") {
    abilities = abilities.split(/[,\s]+/).map(a => a.trim());  // üîÅ ‡πÉ‡∏ä‡πâ regex ‡πÅ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
    } else if (Array.isArray(abilities)) {
    abilities = abilities.flatMap(item => item.split(",").map(a => a.trim()));
  }
  
  abilities = abilities.filter(a => a.length > 0);
  abilities = [...new Set(abilities)];

  const grade = session.grade;
  const name = session.name;
  const educationLevel = session.educationLevel;

  
  if (!grade) {
    return res.json({
      fulfillmentText: "‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞"
    });
  }

  if (abilities.length === 0) {
    return res.json({
      fulfillmentText: "‚ö†Ô∏èüôè ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞ üôè‚ö†Ô∏è"
    });
  }
    let validAbilities = new Set();
    let invalid = [];

    abilities.forEach(a => {
      const closest = findClosestAbility(a);
      if (closest) validAbilities.add(closest);
      else invalid.push(a);
    });

    validAbilities = Array.from(validAbilities);

    if (invalid.length > 0) {
      return res.json({
        fulfillmentText: `‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞\n‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${invalid.join(", ")}" ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à\n‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä`,
      });
    }

    const results = findMatchingMajors(grade, validAbilities, session.educationLevel);

    if (results.length === 0) {
      return res.json({
        fulfillmentText: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${name}\n‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üôá‚Äç‚ôÄÔ∏è`
      });
    }

    const abilitiesInputText = abilities.join(", ");

let reply = `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì${name || ''} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ  \n` +
  `üìò ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ : ${grade}    \n` +
  `üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${abilitiesInputText}  \n\n` +
  `‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ : \n`;

results.forEach((r, i) => {
  const majorInfo = faculties
    .find(f => f.name === r.faculty)
    .majors.find(m => m.name === r.major);

  const requiredGrade = majorInfo.grade !== null ? majorInfo.grade : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const allAbilitiesText = majorInfo.ability.join(", ");
  const matchedAbilitiesText = r.matchedAbilities.join(", ");
  const quotaText = majorInfo.quota ? `üë• ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : ${majorInfo.quota} ‡∏Ñ‡∏ô\n` : "";
  const conditionText = majorInfo.condition ? `üìÑ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ : ${majorInfo.condition}\n` : "";
  const reasonText = majorInfo.reason ? `üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° : ${majorInfo.reason}\n` : "";

  //‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  let careersText = "";
  if (majorInfo.careers && majorInfo.careers.length > 0) {
    careersText = "üíº ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n";
    careersText += majorInfo.careers.map(career => `  ‚Ä¢ ${career}`).join("\n") + "\n";
  }

  reply += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` + // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
           `üéì ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1} ${r.faculty}\n` +
           `üè´ ‡∏™‡∏≤‡∏Ç‡∏≤ : ${r.major}\n` +
           `üìä ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î : ${requiredGrade}\n` +
           `üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ : ${allAbilitiesText}\n` +
           `‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤ : ${matchedAbilitiesText}\n` +
           quotaText +
           conditionText +
           reasonText +
           careersText;  // ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
});

reply += `\n‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏∞!`;
    
// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡∏∞ // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô session ‡πÅ‡∏ö‡∏ö array (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° quota, gradeRequirement, etc.) 5 ‡∏•‡∏≥‡∏î‡∏±‡∏ö
session.sessionId = sessionId;
session.name = name;
session.educationLevel = educationLevel; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å params)
session.grade = grade;
session.abilitiesInputText = abilities.join(", ");

// ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ map results
session.recommendations = results.map((r, i) => {
  const majorInfo = faculties
    .find(f => f.name === r.faculty)
    .majors.find(m => m.name === r.major);

  return {
    rank: i + 1,
    faculty: r.faculty,
    major: r.major,
    requiredGrade: majorInfo.grade,
    abilities: majorInfo.ability,           // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£']
    matchedAbilities: r.matchedAbilities,   // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå']
    quota: majorInfo.quota,
    condition: majorInfo.condition,
    reason: majorInfo.reason,
    careers: majorInfo.careers
  };
});

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
await session.save();
        return res.json({
      fulfillmentText: reply
    });
  }

  return res.json({
    fulfillmentText: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"
  });
});


// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î LINE bot ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ express.raw() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
app.post('/linewebhook',
  express.raw({ type: 'application/json' }),
  line.middleware(lineConfig),
  async (req, res) => {
    try {
      const events = req.body.events;

      await Promise.all(events.map(async (event) => {
        if (event.type === 'message' && event.message.type === 'text') {
          const userMessage = event.message.text;
          const sessionId = event.source.userId || uuid.v4();  // LINE user ID ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô session

if (userMessage === '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà') {
  // ‡∏î‡∏∂‡∏á session ‡∏à‡∏≤‡∏Å MongoDB ‡πÅ‡∏ó‡∏ô
  let session = await Session.findOne({ sessionId: sessionId });

  if (session && session.name && session.grade) {
    session.abilitiesInputText = '';
    session.recommendations = [];

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    await session.save();

    await lineClient.replyMessage(event.replyToken, {
    type: 'text',
    text: `üîÑ ‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞!
    üë§ ‡∏ä‡∏∑‡πà‡∏≠ : ${session.name}
    üìä ‡πÄ‡∏Å‡∏£‡∏î : ${session.grade}
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Ñ‡∏ì‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô `
    });
    return;
  } else {
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÅ‡∏ô‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏ì‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞'
    });
    return;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ number
const safeText = (text) => {
  if (typeof text === 'string' && text.trim() !== '') return text;
  if (typeof text === 'number') return text.toString();
  return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
};

const safeArray = (arr) =>
  Array.isArray(arr) && arr.length > 0 ? arr : ['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'];

// STEP 1: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" -> ‡πÅ‡∏™‡∏î‡∏á Flex Message ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞
if (userMessage === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á bubbles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ì‡∏∞ (‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡∏ü‡πâ‡∏≤/‡∏ä‡∏°‡∏û‡∏π)
  const facultyBubbles = faculties.map((faculty, index) => ({
    type: "bubble",
    size: "micro",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
      {
        type: "text",
        text: faculty.name,   // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        weight: "bold",
        size: "sm",
        wrap: true,
        align: "center"
      }
    ],      
      paddingAll: "10px",
      spacing: "sm"
    },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          style: "primary",
          color: index % 2 === 0 ? "#1E90FF" : "#FF69B4",
          action: {
            type: "message",
            label: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å üéØ`,
            text: faculty.name
          }
        }
      ],
      paddingAll: "10px",
      spacing: "sm"
    }
  }));

  await lineClient.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: 'üôè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòä\n‚û°Ô∏è ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ'
    },
    {
      type: "flex",
      altText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à",
      contents: {
        type: "carousel",
        contents: facultyBubbles
      }
    }
  ]);
  return;
}

const majorEmojiMap = {
  "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå": "üíª",
  "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°": "‚öôÔ∏è",
  "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå": "üè•",
  "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à": "üíº",
  "‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå": "üé®",
  "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤": "üìö",
  "‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå": "üåç",
  "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢": "üó£Ô∏è",
  "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "üî¨",
  "‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢": "‚öñÔ∏è",
};

// STEP 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞ -> ‡πÅ‡∏™‡∏î‡∏á Flex Message ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤
const selectedFaculty = faculties.find(f => f.name === userMessage);
if (selectedFaculty) {
  const majorBubbles = selectedFaculty.majors.map((major, index) => {
    // ‡∏´‡∏≤ emoji ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ major.name ‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏î‡πÉ‡∏ô map ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
    let emoji = "";
    for (const key in majorEmojiMap) {
      if (major.name.includes(key)) {
        emoji = majorEmojiMap[key];
        break;  // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
      }
    }

    return {
      type: "bubble",
      size: "micro",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: major.name,  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤            
            weight: "bold",
            size: "sm",
            wrap: true,
            align: "center"
          }
        ],
        paddingAll: "10px",
        spacing: "sm"
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "primary",
            color: index % 2 === 0 ? "#FFA500" : "#FFD700",
            action: {
              type: "message",
              label: emoji,
              text: major.name
            }
          }
        ],
        paddingAll: "10px",
        spacing: "sm"
      }
    };
  });

  await lineClient.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: `üéì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô\n"${selectedFaculty.name}" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòä`
    },
    {
      type: "flex",
      altText: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô "${selectedFaculty.name}"`,
      contents: {
        type: "carousel",
        contents: majorBubbles
      }
    }
  ]);
  return;
}

// STEP 3: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤
let matchedMajor, matchedFaculty;
for (const faculty of faculties) {
  const found = faculty.majors.find(m => m.name === userMessage);
  if (found) {
    matchedMajor = found;
    matchedFaculty = faculty;
    break;
  }
}

if (matchedMajor) {
  const gradeText = safeText(matchedMajor?.grade);
  const conditionText = safeText(matchedMajor?.condition);
  const abilityText = safeArray(matchedMajor?.ability).join(", ");
  const quotaText = safeText(matchedMajor?.quota);
  const careersArray = safeArray(matchedMajor?.careers);

  const careersContents = careersArray.map(career => ({
    type: "text",
    text: `‚Ä¢ ${career}`,
    size: "sm",
    wrap: true
  }));

  const bubble = {
    type: "bubble",
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: `üìö ${safeText(matchedFaculty?.name)}`,
          weight: "bold",
          size: "lg",
          wrap: true
        },
        {
          type: "text",
          text: `üìò ‡∏™‡∏≤‡∏Ç‡∏≤${safeText(matchedMajor?.name)}`,
          weight: "bold",
          size: "md",
          wrap: true
        }
      ]
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
     // ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    { type: "text", text: "üìä ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", size: "sm", weight: "bold", margin: "md" },
    { type: "text", text: gradeText, size: "sm", wrap: true },

    // ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
    { type: "text", text: "üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ", size: "sm", weight: "bold", margin: "md" },
    { type: "text", text: abilityText, size: "sm", wrap: true },

    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
    { type: "text", text: "üß† ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", size: "sm", weight: "bold", margin: "md" },
    { type: "text", text: quotaText, size: "sm", wrap: true },

    // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
    { type: "text", text: "üìå ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç", size: "sm", weight: "bold", margin: "md" },
    { type: "text", text: conditionText, size: "sm", wrap: true },

    // ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
    { type: "text", text: "üéØ ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", size: "sm", weight: "bold", margin: "md" },
    ...careersContents
  ] 
    },
    footer: {
      type: "box",
      layout: "horizontal",
      contents: [
        {
          type: "button",
          style: "primary",
          action: {
            type: "message",
            label: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
            text: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
          }
        }
      ]
    }
  };

  console.log("‚úÖ Bubble Payload:", JSON.stringify(bubble, null, 2));

  await lineClient.replyMessage(event.replyToken, {
    type: "flex",
    altText: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ ${safeText(matchedMajor?.name)}`.slice(0, 400),
    contents: bubble
  });
  return;  
}

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Intent ‡∏à‡∏≤‡∏Å Dialogflow
          const dialogflowResult = await detectIntentText(sessionId, userMessage);
          const replyText = dialogflowResult.fulfillmentText || '‚ùó ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞  \n‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ  \n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä';

          // <--- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á carousel --->
          if (dialogflowResult.intent && dialogflowResult.intent.displayName === 'get skills') {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏à‡∏≤‡∏Å MongoDB
            const session = await getSession(sessionId);

          if (session && session.recommendations && session.recommendations.length > 0) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô carousel
          const introText = `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${session.name || ''} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ\n\n` +
                      `üìò ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ : ${session.grade}\n` +
                      `üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${session.abilitiesInputText}\n\n` +
                      `üéØ ‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì 5 ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üëá `;              
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message carousel
              const bubbles = session.recommendations.map((rec) => {
                return {
                  type: "bubble",
                  size: "mega", 
                  header: {
                    type: "box",
                    layout: "vertical",
                    contents: [
                      {
                        type: "text",
                        text: `üéì ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${rec.rank}`,
                        weight: "bold",
                        color: "#1DB446",
                        size: "lg"
                      },
                      {
                        type: "text",
                        text: rec.faculty,
                        weight: "bold",
                        size: "md",
                        wrap: true,
                        margin: "sm"
                      },
                      {
                      type: "text",
                      text: `üè´ ‡∏™‡∏≤‡∏Ç‡∏≤${rec.major}`,
                      weight: "bold",
                      size: "sm",
                      wrap: true
                      }
                    ]
                  },
                  body: {
                    type: "box",
                    layout: "vertical",
                    spacing: "sm",
                    contents: [
                     {
                        type: "text",
                        text: "üìä ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                     },
                     {
                        type: "text",
                        text: rec.requiredGrade !== null ? `${rec.requiredGrade}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: "üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                      },
                      {
                        type: "text",
                        text: rec.abilities && rec.abilities.length > 0 ? `${rec.abilities.join(", ")}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: "‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                      },
                      {
                        type: "text",
                        text: rec.matchedAbilities && rec.matchedAbilities.length > 0 ? `${rec.matchedAbilities.join(", ")}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: "üë• ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                      },
                      {
                        type: "text",
                        text: rec.quota ? `${rec.quota} ‡∏Ñ‡∏ô` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: "üìÑ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                      },
                      {
                        type: "text",
                        text: rec.condition ? rec.condition : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: "üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
                        size: "sm",
                        weight: "bold",
                        wrap: true,
                        margin: "md"
                      },
                      {
                        type: "text",
                        text: rec.reason ? rec.reason : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                        size: "sm",
                        wrap: true,
                        margin: "xs"
                      },
                      {
                        type: "text",
                        text: `üíº ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á`,
                        weight: "bold",
                        margin: "md",
                        size: "sm"
                      },
                      ...((rec.careers && rec.careers.length > 0) ?
                        rec.careers.map(career => ({
                          type: "text",
                          text: `‚Ä¢ ${career}`,
                          size: "sm",
                          margin: "xs",
                          wrap: true
                        }))
                        : [{
                          type: "text",
                          text: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                          size: "sm",
                          margin: "xs"
                        }]
                      )
                    ]
                  },
                  footer: {
                    type: "box",
                    layout: "horizontal",
                    contents: [
                      {
                        type: "button",
                        style: "primary",
                        action: {
                          type: "message",
                          label: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
                          text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà"
                        }
                      }
                    ]
                  }
                };
              });

// 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô
await lineClient.replyMessage(event.replyToken, {
  type: 'text',
  text: introText
});

// 2. ‡πÉ‡∏ä‡πâ pushMessage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á bubble carousel (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
await lineClient.pushMessage(event.source.userId, {
  type: "flex",
  altText: "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤",
  contents: {
    type: "carousel",
    contents: bubbles
  }
});  
  return;  // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ã‡πâ‡∏≥
            } else {
              // ‡∏Å‡∏£‡∏ì‡∏µ session ‡πÑ‡∏°‡πà‡∏°‡∏µ recommendations
              await lineClient.replyMessage(event.replyToken, {
                type: "text",
                text: "‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üôá‚Äç‚ôÄÔ∏è"
              });
              return;
            }
          }

          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: replyText,
          });
        }
      }));

      res.status(200).send('OK');
    } catch (err) {
      console.error(err);
      res.status(500).send('Error');
    }
  }
);
// --- ‡∏à‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î LINE bot ---

app.listen(PORT, () => {
  console.log(`‚úÖ Server running at http://localhost:${PORT}`);
});