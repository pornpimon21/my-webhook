require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const levenshtein = require('fast-levenshtein');
const line = require('@line/bot-sdk');
const { SessionsClient } = require('@google-cloud/dialogflow');
const uuid = require('uuid');
const fs = require('fs');
const path = require('path');

const Session = require('./models/session');       // Mongoose schema for session
const EventLog = require('./models/eventLog');     // Mongoose schema for event log

const app = express();
const PORT = process.env.PORT || 3000;

// --- Setup Dialogflow key from base64 env ---
const keyPath = path.join(__dirname, 'dialogflow-key.json');
if (!fs.existsSync(keyPath) && process.env.GOOGLE_CREDENTIALS_BASE64) {
  const buffer = Buffer.from(process.env.GOOGLE_CREDENTIALS_BASE64, 'base64');
  fs.writeFileSync(keyPath, buffer);
  console.log('‚úÖ Created dialogflow-key.json from base64!');
}
process.env.GOOGLE_APPLICATION_CREDENTIALS = keyPath;

// --- Connect to MongoDB ---
mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ MongoDB connected!'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// --- LINE SDK setup ---
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const lineClient = new line.Client(lineConfig);

// --- Dialogflow client ---
const projectId = process.env.DIALOGFLOW_PROJECT_ID;
const sessionClient = new SessionsClient();

async function detectIntentText(sessionId, text, languageCode = 'th') {
  const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);
  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        text,
        languageCode,
      },
    },
  };
  const responses = await sessionClient.detectIntent(request);
  return responses[0].queryResult;
}

// --- Data: faculties and majors (sample) ---
const faculties = [
  {
    name: '‡∏Ñ‡∏ì‡∏∞‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    majors: [
      {
        name: '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢',
        grade: 2.75,
        ability: ['‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', '‡∏™‡∏≠‡∏ô', '‡∏Ñ‡∏£‡∏π', '‡∏£‡∏±‡∏Å‡πÄ‡∏î‡πá‡∏Å', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô', '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', '‡∏ß‡∏£‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏°', '‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô', '‡∏à‡∏±‡∏ö‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°', '‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á'],
        quota: 60,
        condition: "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÄ‡∏Å‡∏£‡∏î‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 3.0",
        reason: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡πâ‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô',
        careers: ["‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", "‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", "‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£"],
      },
      {
        name: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        grade: 2.50,
        ability: ['‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡πÄ‡∏Ñ‡∏°‡∏µ', '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', '‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', '‡πÅ‡∏•‡πá‡∏ö'],
        quota: 60,
        condition: "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≠‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡πå-‡∏Ñ‡∏ì‡∏¥‡∏ï, ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        reason: '',
        careers: ["‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£", "‡∏ô‡∏±‡∏Å‡πÄ‡∏Ñ‡∏°‡∏µ", "‡∏ô‡∏±‡∏Å‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå"],
      },
    ],
  },
];

// --- Utility functions ---
function findClosestAbility(userInput, thresholdRatio = 0.5) {
  userInput = userInput.trim().toLowerCase();
  const allAbilities = [...new Set(faculties.flatMap(f => f.majors.flatMap(m => m.ability)))].map(a => a.trim().toLowerCase());

  if (allAbilities.includes(userInput)) return userInput;

  const prefixMatch = allAbilities.find(a => a.startsWith(userInput));
  if (prefixMatch) return prefixMatch;

  const partialMatch = allAbilities.find(a => a.includes(userInput));
  if (partialMatch) return partialMatch;

  const threshold = Math.ceil(userInput.length * thresholdRatio);
  let closest = null, minDist = Infinity;

  for (const ability of allAbilities) {
    const dist = levenshtein.get(userInput, ability);
    if (dist < minDist) {
      minDist = dist;
      closest = ability;
    }
  }

  return minDist <= threshold ? closest : null;
}

function findMatchingMajors(grade, abilities) {
  let results = [];

  faculties.forEach(faculty => {
    faculty.majors.forEach(major => {
      const matchGrade = (major.grade === null || grade >= major.grade);

      const matchedAbilities = major.ability.filter(majorAbility => {
        return abilities.some(userAbility => {
          const dist = levenshtein.get(userAbility, majorAbility);
          const threshold = Math.ceil(Math.min(userAbility.length, majorAbility.length) / 2);
          return dist <= threshold;
        });
      });

      if (matchGrade && matchedAbilities.length > 0) {
        results.push({
          faculty: faculty.name,
          major: major.name,
          score: matchedAbilities.length,
          matchedAbilities,
        });
      }
    });
  });

  return results.sort((a, b) => b.score - a.score).slice(0, 5);
}

// --- MongoDB helpers ---
async function getSession(sessionId) {
  let session = await Session.findOne({ sessionId });
  if (!session) session = new Session({ sessionId });
  return session;
}

async function saveSession(session) {
  await session.save();
}

// --- Webhook endpoint for Dialogflow fulfillment ---
app.use('/webhook', express.json());
app.post('/webhook', async (req, res) => {
  try {
    const eventId = req.body.originalDetectIntentRequest?.payload?.data?.webhookEventId;
    if (eventId) {
      const existEvent = await EventLog.findOne({ eventId });
      if (existEvent) return res.status(200).send(); // already processed
      await EventLog.create({ eventId });
    }

    const intent = req.body.queryResult?.intent?.displayName || '';
    const params = req.body.queryResult?.parameters || {};
    const sessionId = req.body.session || 'default-session';

    const session = await getSession(sessionId);

    // Welcome intent
    if (intent === 'welcome') {
      return res.json({ fulfillmentText: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞" });
    }

    // Get Name
    if (intent === 'get name') {
      const name = params.name || '‡∏Ñ‡∏∏‡∏ì';
      session.name = name;
      await saveSession(session);
      return res.json({
        fulfillmentText: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${name} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 3.5) ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4.0 ‡∏Ñ‡πà‡∏∞`
      });
    }

    // Get Grade
    if (intent === 'get grade') {
      const grade = params.grade;
      if (typeof grade !== 'number' || grade < 0 || grade > 4) {
        return res.json({
          fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0.0 - 4.0)",
          outputContexts: [{ name: `${sessionId}/contexts/awaiting-grade`, lifespanCount: 1 }],
        });
      }
      session.grade = grade;
      await saveSession(session);
      return res.json({
        fulfillmentText: `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î ${grade} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏•‡∏Ç ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå)`,
      });
    }

    // Get Skills / abilities
    if (intent === 'get skills') {
      let abilities = params.ability;
      if (typeof abilities === 'string') {
        abilities = abilities.split(/[,\s]+/).map(a => a.trim());
      } else if (Array.isArray(abilities)) {
        abilities = abilities.flatMap(item => item.split(',').map(a => a.trim()));
      }
      abilities = abilities.filter(a => a.length > 0);
      abilities = [...new Set(abilities)];

      const grade = session.grade;
      const name = session.name;

      if (!grade) {
        return res.json({ fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Å‡∏£‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞" });
      }
      if (abilities.length === 0) {
        return res.json({ fulfillmentText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞" });
      }

      let validAbilities = new Set();
      let invalid = [];

      abilities.forEach(a => {
        const closest = findClosestAbility(a);
        if (closest) validAbilities.add(closest);
        else invalid.push(a);
      });
      validAbilities = Array.from(validAbilities);

      if (invalid.length > 0) {
        return res.json({
          fulfillmentText: `‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${invalid.join(', ')}" ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞`,
        });
      }

      const results = findMatchingMajors(grade, validAbilities);
      if (results.length === 0) {
        return res.json({
          fulfillmentText: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏ì ${name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞`,
        });
      }

      const abilitiesInputText = abilities.join(', ');
      let reply = `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì${name || ''} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ  \n` +
        `üìò ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ : ${grade}    \n` +
        `üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${abilitiesInputText}  \n\n` +
        `‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ : \n`;

      results.forEach((r, i) => {
        const majorInfo = faculties
          .find(f => f.name === r.faculty)
          .majors.find(m => m.name === r.major);

        reply += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
          `üéì ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1} ${r.faculty}\n` +
          `   üè´ ‡∏™‡∏≤‡∏Ç‡∏≤ : ${r.major}\n` +
          `   üìä ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î : ${majorInfo.grade !== null ? majorInfo.grade : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n` +
          `   üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ : ${majorInfo.ability.join(', ')}\n` +
          `   ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ : ${r.matchedAbilities.join(', ')}\n` +
          (majorInfo.quota ? `   üë• ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : ${majorInfo.quota} ‡∏Ñ‡∏ô\n` : '') +
          (majorInfo.condition ? `   üìÑ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ : ${majorInfo.condition}\n` : '') +
          (majorInfo.reason ? `   üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° : ${majorInfo.reason}\n` : '');
      });

      reply += `\n‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏∞!`;

      // Save session data
      session.abilitiesInputText = abilitiesInputText;
      session.recommendations = results.map((r, i) => {
        const majorInfo = faculties
          .find(f => f.name === r.faculty)
          .majors.find(m => m.name === r.major);
        return {
          rank: i + 1,
          faculty: r.faculty,
          major: r.major,
          allAbilities: majorInfo.ability.join(', '),
          careers: majorInfo.careers || [],
          matchedAbilities: r.matchedAbilities.join(', '),
        };
      });
      await saveSession(session);

      return res.json({ fulfillmentText: reply });
    }

    // Fallback response
    return res.json({ fulfillmentText: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" });
  } catch (err) {
    console.error(err);
    return res.status(500).send('Internal Server Error');
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
function createCareerButtons(recommendations) {
  if (!recommendations || recommendations.length === 0) return null;

  const rec = recommendations[0];

  if (!rec.careers || rec.careers.length === 0) return null;

  const actions = rec.careers.slice(0, 4).map(career => ({
    type: 'message',
    label: career.length > 20 ? career.slice(0, 17) + '...' : career,
    text: `‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${career}`
  }));

  return {
    type: 'template',
    altText: `‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ${rec.major}`,
    template: {
      type: 'buttons',
      title: `${rec.faculty} / ${rec.major}`,
      text: '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á :',
      actions: actions
    }
  };
}

// --- LINE webhook ---
app.post('/linewebhook',
  express.raw({ type: 'application/json' }),
  line.middleware(lineConfig),
  async (req, res) => {
    try {
      const events = req.body.events;

      await Promise.all(events.map(async (event) => {
        if (event.type === 'message' && event.message.type === 'text') {
          const userMessage = event.message.text;
          const sessionId = event.source.userId || uuid.v4();

          if (userMessage === '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞') {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Dialogflow intent 'welcome' ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            const dialogflowResult = await detectIntentText(sessionId, '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ');

            // ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏Å‡πà‡∏≠‡∏ô
            await lineClient.replyMessage(event.replyToken, {
              type: 'text',
              text: dialogflowResult.fulfillmentText
            });

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            const session = await Session.findOne({ sessionId });

            if (session?.recommendations?.length > 0) {
              const careerButtonsMessage = createCareerButtons(session.recommendations);

              if (careerButtonsMessage) {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                await lineClient.pushMessage(event.source.userId, careerButtonsMessage);
              } else {
                await lineClient.pushMessage(event.source.userId, {
                  type: 'text',
                  text: '‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á'
                });
              }
            } else {
              await lineClient.pushMessage(event.source.userId, {
                type: 'text',
                text: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞'
              });
            }

            return;
          }

          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Dialogflow ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent
          const dialogflowResult = await detectIntentText(sessionId, userMessage);
          const replyText = dialogflowResult.fulfillmentText || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏∞';

          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: replyText
          });
        }
      }));

      res.status(200).send('OK');
    } catch (err) {
      console.error(err);
      res.status(500).send('Error');
    }
  }
);
// --- Start server ---
app.listen(PORT, () => {
  console.log(`‚úÖ Server running at http://localhost:${PORT}`);
});
