require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const levenshtein = require('fast-levenshtein');
const Session = require('./models/session');
const EventLog = require('./models/eventLog');
const line = require('@line/bot-sdk');
const { SessionsClient } = require('@google-cloud/dialogflow');
const uuid = require('uuid');
const faculties = require('./facultiesData');
const { buildQuestionFlex } = require('./skillsMenu');
const analyzeAnswers = require('./analyze');
const questions = require('./questions');
const { faqFlex, faqs } = require('./faqFlex');
const { createPlanCard, handlePostback } = require('./flexTemplates');
const userSessions = {}; // <== ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ userId

const app = express();
const PORT = process.env.PORT || 3000;
//app.use(express.json());

const uri = process.env.MONGODB_URI;


const fs = require('fs');
const path = require('path');

const keyPath = path.join(__dirname, 'dialogflow-key.json');
if (!fs.existsSync(keyPath) && process.env.GOOGLE_CREDENTIALS_BASE64) {
  const buffer = Buffer.from(process.env.GOOGLE_CREDENTIALS_BASE64, 'base64');
  fs.writeFileSync(keyPath, buffer);
  console.log('‚úÖ Created dialogflow-key.json from base64!');
}
process.env.GOOGLE_APPLICATION_CREDENTIALS = keyPath;


mongoose.connect(uri)
.then(() => console.log('‚úÖ MongoDB connected!'))
.catch(err => console.error('‚ùå MongoDB connection error:', err));

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};
const client = new line.Client(lineConfig);
const projectId = process.env.DIALOGFLOW_PROJECT_ID;
const sessionClient = new SessionsClient();

async function detectIntentText(sessionId, text, languageCode = 'th') {
  const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);
  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        text,
        languageCode,
      },
    },
  };

  const responses = await sessionClient.detectIntent(request);
  return responses[0].queryResult;
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
function findClosestAbility(userInput, similarityThreshold = 0.85) {
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
  userInput = userInput.trim().toLowerCase();

  // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å ability ‡∏Ç‡∏≠‡∏á faculties ‡πÅ‡∏•‡∏∞ majors (‡∏ï‡∏±‡∏î‡∏ã‡πâ‡∏≥)
  const allAbilities = [...new Set(
    faculties.flatMap(f => f.majors.flatMap(m => m.ability))
  )].map(a => a.trim().toLowerCase());

  // 1Ô∏è‚É£ exact match ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡∏¢
  if (allAbilities.includes(userInput)) return userInput;

  // 2Ô∏è‚É£ prefix match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ input ‚â• 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  if (userInput.length >= 3) {
    const prefixMatch = allAbilities.find(a => a.startsWith(userInput));
    if (prefixMatch) return prefixMatch;
  }

  // 3Ô∏è‚É£ similarity ratio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  let closest = null;
  let maxSimilarity = 0;
  for (const ability of allAbilities) {
    const dist = levenshtein.get(userInput, ability);
    const similarity = 1 - (dist / Math.max(userInput.length, ability.length));
    // ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ similarity ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡πÜ
    if (similarity > maxSimilarity && similarity >= similarityThreshold) {
      maxSimilarity = similarity;
      closest = ability;
    }
  }

  return closest; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤ similarity ‡∏™‡∏π‡∏á‡∏û‡∏≠
}

//‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
function findMatchingMajors(grade, abilities, educationLevel) {
  let results = [];

 // ‡πÅ‡∏õ‡∏•‡∏á abilities ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const abilities = userAbilities
    .map(a => findClosestAbility(a))  // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏°‡πà‡∏ô ‡πÜ
    .filter(a => a !== null);

  faculties.forEach(faculty => {
    faculty.majors.forEach(major => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
      if (grade < major.grade) return;
      if (!major.requiredEducation.includes(educationLevel)) return;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ major ‡∏°‡∏µ ability ‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö abilities ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const matchedAbilities = major.ability.filter(majorAbility =>
        abilities.includes(majorAbility.toLowerCase())
      );

      if (matchedAbilities.length === 0) return;

      results.push({
        faculty: faculty.name,
        major: major.name,
        matchedAbilities,
        condition: major.condition,
        grade: major.grade
      });
    });
  });

  // Top 5 ‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô abilities ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  let topByAbilities = results
    .sort((a, b) => b.matchedAbilities.length - a.matchedAbilities.length)
    .slice(0, 5);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á Top 5 ‡∏ï‡∏≤‡∏° grade ‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
  return topByAbilities.sort((a, b) => b.grade - a.grade);
}

// MongoDB Session Helper
async function getSession(sessionId) {
  let session = await Session.findOne({ sessionId });
  if (!session) session = new Session({ sessionId });
  return session;
}
async function saveSession(session) {
  await session.save();
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session
async function updateSession(sessionId, data) {
  return Session.updateOne({ sessionId }, { $set: data }, { upsert: true });
}

// Webhook Endpoint
app.use('/webhook', express.json());
app.post("/webhook", async (req, res) => {
  const eventId = req.body.originalDetectIntentRequest?.payload?.data?.webhookEventId;

  if (eventId) {
    try {
      const exists = await EventLog.findOne({ eventId });
      if (exists) {
        return res.status(200).send(); // üõë ‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
      }
      await EventLog.create({ eventId }); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏•‡πâ‡∏ß
    } catch (err) {
      console.error("‚ùå EventLog error:", err.message);
    }
  }  
   const intent = req.body.queryResult?.intent?.displayName || "";
   const params = req.body.queryResult?.parameters || {};
   const sessionFull = req.body.session || "default-session";

   const sessionId = sessionFull.split('/').pop();  // ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà userId   
   const session = await getSession(sessionId);
   session.sessionId = sessionId;  // ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß  
   if (!session) session = { userId: sessionId };


  if (intent === "welcome") {
    return res.json({
      fulfillmentText: "üåü ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤ üéì\n\n‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"
    });
  }

if (intent === "get name") {
  const name = params.name || "‡∏Ñ‡∏∏‡∏ì";
  session.name = name;
  await saveSession(session);

const levels = ["‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢", "‡∏õ‡∏ß‡∏ä", "‡∏õ‡∏ß‡∏™", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"];
const colors = ["#FFCC80", "#F48FB1", "#BA68C8", "#4FC3F7"];
const labels = {
  "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢": "‡∏°.‡∏õ‡∏•‡∏≤‡∏¢ üéì",
  "‡∏õ‡∏ß‡∏ä": "‡∏õ‡∏ß‡∏ä üõ†Ô∏è",
  "‡∏õ‡∏ß‡∏™": "‡∏õ‡∏ß‡∏™ üîß",
  "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ üìò"
};
const levelBubbles = levels.map((level, index) => ({
  type: "bubble",
  size: "micro",
  body: {
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "button",
        style: "primary",
        color: colors[index],
        action: {
          type: "message",
          label: labels[level],
          text: level
        }
      }
    ]
  }
}));
// 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Dialogflow ‡∏Å‡πà‡∏≠‡∏ô
res.json({
fulfillmentText: `üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${name}\nüìò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üéì\nüëá ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`
});

// 2. ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô push message (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô)
setTimeout(() => {
  client.pushMessage(sessionId, {
    type: "flex",
    altText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    contents: {
      type: "carousel",
      contents: levelBubbles
    }
  }).catch((err) => {
    console.error("Push message error:", err);
  });
}, 500); // ‚úÖ ‡∏£‡∏≠ 500 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

return;
}

if (intent === "educationLevel") {
  const educationLevel = (params.educationLevel || "").toLowerCase();
  session.educationLevel = educationLevel;
  await saveSession(session);

  if (["‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢", "‡∏õ‡∏ß‡∏ä", "‡∏õ‡∏ß‡∏™", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"].includes(educationLevel)) {
    return res.json({
      fulfillmentText: `üéì ‡∏Ñ‡∏∏‡∏ì${session.name || ""} ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ : ${educationLevel}\n\n` +
                       `üìò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (GPAX) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á : 3.25 ‡∏´‡∏£‡∏∑‡∏≠ 3.50\n\nüîî ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4.00 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üìà`,
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_grad`,
        lifespanCount: 2
      }]
    });
  } else {
    return res.json({
      fulfillmentText: `‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${session.name || ""} üôè\n\n` +
                       `‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏õ‡∏•‡∏≤‡∏¢, ‡∏õ‡∏ß‡∏ä, ‡∏õ‡∏ß‡∏™, ‡∏≠‡∏∑‡πà‡∏ô‡πÜ) üôá‚Äç‚ôÄÔ∏è`,
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_education`,
        lifespanCount: 2
      }]
    });
  }
} 

  if (intent === "get grade") {
    const grade = params.grade;
    if (typeof grade !== "number" || grade < 0 || grade > 4) {
      return res.json({
        fulfillmentText: "üìä ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0.0 - 4.0 ‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
      });
    }
    session.grade = grade;
    await saveSession(session);
    return res.json({
    fulfillmentText: `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${session.name || ""}\nüìä ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${grade}\n\nüß† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ *‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ* ‡∏´‡∏£‡∏∑‡∏≠ *‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î* ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå üíª | ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‚ûï | ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á üé≠ | ‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ üé® | ‡∏Å‡∏µ‡∏¨‡∏≤ ‚öΩ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô üöÄ`,
      outputContexts: [{
        name: `${sessionFull}/contexts/ask_skills`,
        lifespanCount: 2
      }]
    });
  } 

if (intent === "get skills") {
  let abilities = params.ability;
  if (typeof abilities === "string") {
    abilities = abilities.split(/[,\s]+/).map(a => a.trim());  // üîÅ ‡πÉ‡∏ä‡πâ regex ‡πÅ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
    } else if (Array.isArray(abilities)) {
    abilities = abilities.flatMap(item => item.split(",").map(a => a.trim()));
  }
  
  abilities = abilities.filter(a => a.length > 0);
  abilities = [...new Set(abilities)];

  const grade = session.grade;
  const name = session.name;
  const educationLevel = session.educationLevel;

  
  if (!grade) {
    return res.json({
      fulfillmentText: "‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞"
    });
  }

  if (abilities.length === 0) {
    return res.json({
      fulfillmentText: "‚ö†Ô∏èüôè ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞ üôè‚ö†Ô∏è"
    });
  }
    let validAbilities = new Set();
    let invalid = [];

    abilities.forEach(a => {
      const closest = findClosestAbility(a);
      if (closest) validAbilities.add(closest);
      else invalid.push(a);
    });

    validAbilities = Array.from(validAbilities);

    if (invalid.length > 0) {
      return res.json({
        fulfillmentText: `‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞\n‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${invalid.join(", ")}" ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à\n‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä`,
      });
    }

    const results = findMatchingMajors(grade, validAbilities, session.educationLevel);

    if (results.length === 0) {
      return res.json({
        fulfillmentText: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${name}\n‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üôá‚Äç‚ôÄÔ∏è`
      });
    }

    const abilitiesInputText = abilities.join(", ");

let reply = `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞‡∏Ñ‡∏∏‡∏ì${name || ''} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ  \n` +
  `üìò ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ : ${grade}    \n` +
  `üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${abilitiesInputText}  \n\n` +
  `‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ : \n`;

results.forEach((r, i) => {
  const majorInfo = faculties
    .find(f => f.name === r.faculty)
    .majors.find(m => m.name === r.major);

  const requiredGrade = majorInfo.grade !== null ? majorInfo.grade : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const allAbilitiesText = majorInfo.ability.join(", ");
  const matchedAbilitiesText = r.matchedAbilities.join(", ");
  const quotaText = majorInfo.quota ? `üë• ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : ${majorInfo.quota} ‡∏Ñ‡∏ô\n` : "";
  const conditionText = majorInfo.condition ? `üìÑ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ : ${majorInfo.condition}\n` : "";
  const reasonText = majorInfo.reason ? `üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° : ${majorInfo.reason}\n` : "";

  //‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  let careersText = "";
  if (majorInfo.careers && majorInfo.careers.length > 0) {
    careersText = "üíº ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï\n";
    careersText += majorInfo.careers.map(career => `  ‚Ä¢ ${career}`).join("\n") + "\n";
  }

  reply += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` + // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
           `üéì ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1} ${r.faculty}\n` +
           `üè´ ‡∏™‡∏≤‡∏Ç‡∏≤ : ${r.major}\n` +
           `üìä ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î : ${requiredGrade}\n` +
           `üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ : ${allAbilitiesText}\n` +
           `‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤ : ${matchedAbilitiesText}\n` +
           quotaText +
           conditionText +
           reasonText +
           careersText;  // ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
});

reply += `\n‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏∞‡∏Ñ‡∏∞!`;

// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡∏∞ // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô session ‡πÅ‡∏ö‡∏ö array (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° quota, gradeRequirement, etc.) 5 ‡∏•‡∏≥‡∏î‡∏±‡∏ö
session.sessionId = sessionId;
session.name = name;
session.grade = grade;
session.abilitiesInputText = abilities.join(", ");

// ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ map results
session.recommendations = results.map((r, i) => {
  const majorInfo = faculties
    .find(f => f.name === r.faculty)
    .majors.find(m => m.name === r.major);

  return {
    rank: i + 1,
    faculty: r.faculty,
    major: r.major,
    requiredGrade: majorInfo.grade,
    abilities: majorInfo.ability,           // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£']
    matchedAbilities: r.matchedAbilities,   // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå']
    quota: majorInfo.quota,
    condition: majorInfo.condition,
    reason: majorInfo.reason,
    careers: majorInfo.careers,

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å majorInfo
    studyPlan: majorInfo.studyPlan,
    studyPlanPdf: majorInfo.studyPlanPdf,
    studyPlanInfoImg: majorInfo.studyPlanInfoImg,
    website: majorInfo.website,
    majorsFacebook: majorInfo.majorsFacebook,
    facultyFacebook: majorInfo.facultyFacebook,
    logoUrl: majorInfo.logoUrl
  };
});

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
await session.save();
        return res.json({
      fulfillmentText: reply
    });
  }

  return res.json({
    fulfillmentText: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"
  });
});


// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î LINE bot ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ express.raw() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
app.post('/linewebhook',
  express.raw({ type: 'application/json' }),
  line.middleware(lineConfig),
  async (req, res) => {
    try {
      const events = req.body.events;

      await Promise.all(events.map(async (event) => {
        if (event.type === "postback") {
          console.log("üì© ‡πÑ‡∏î‡πâ postback:", event.postback.data);
          await handlePostback(event, client, faculties);
          return;
        }

        if (event.type === 'message' && event.message.type === 'text') {
          const userId = event.source.userId;
          const userMessage = event.message.text;
          const sessionId = event.source.userId || uuid.v4();  // LINE user ID ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô session


if (userMessage === "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢") {
    // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π FAQ Flex Message
    await client.replyMessage(event.replyToken, faqFlex);
    return;
  }

  if (faqs[userMessage]) {
    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö FAQ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    await client.replyMessage(event.replyToken, {
      type: "text",
      text: faqs[userMessage],
    });
    return;
  }

if (userMessage === "‡∏Ñ‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à") {
  const categorizedActivityFlex = {
    type: "flex",
    altText: "‡∏Ñ‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à",
    contents: {
      type: "bubble",
      size: "mega",
      body: {
        type: "box",
        layout: "vertical",
        spacing: "lg",
        contents: [
          {
            type: "text",
            text: "üß† ‡∏Ñ‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à",
            weight: "bold",
            size: "lg",
            color: "#0D99FF"
          },
          {
            type: "text",
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ üëá",
            wrap: true,
            size: "sm",
            color: "#555555"
          },
          {
            type: "separator",
            color: "#AAAAAA"
          },

          // üîπ ‡∏®‡∏¥‡∏•‡∏õ‡∏∞ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå
          {
            type: "text",
            text: "üé® ‡∏®‡∏¥‡∏•‡∏õ‡∏∞ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå",
            weight: "bold",
            size: "md",
            color: "#333333"
          },
          {
            type: "text",
            text: "‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á, ‡∏î‡∏ô‡∏ï‡∏£‡∏µ, ‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ, ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö, ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå",
            wrap: true,
            size: "sm",
            color: "#666666"
          },

          // üîπ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ / ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
          {
            type: "text",
            text: "üíª ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ / ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
            weight: "bold",
            size: "md",
            margin: "md",
            color: "#333333"
          },
          {
            type: "text",
            text: "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÄ‡∏Å‡∏°, ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞",
            wrap: true,
            size: "sm",
            color: "#666666"
          },

          // üîπ ‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ / ‡∏†‡∏≤‡∏©‡∏≤
          {
            type: "text",
            text: "üìö ‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ / ‡∏†‡∏≤‡∏©‡∏≤",
            weight: "bold",
            size: "md",
            margin: "md",
            color: "#333333"
          },
          {
            type: "text",
            text: "‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå, ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå, ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
            wrap: true,
            size: "sm",
            color: "#666666"
          },

          // üîπ ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ / ‡∏ú‡∏π‡πâ‡∏ô‡∏≥
          {
            type: "text",
            text: "üó£ ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ / ‡∏ú‡∏π‡πâ‡∏ô‡∏≥",
            weight: "bold",
            size: "md",
            margin: "md",
            color: "#333333"
          },
          {
            type: "text",
            text: "‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î, ‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏à‡∏≤, ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°, ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£, ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
            wrap: true,
            size: "sm",
            color: "#666666"
          },

          // üîπ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û / ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
          {
            type: "text",
            text: "‚öΩ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û / ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß",
            weight: "bold",
            size: "md",
            margin: "md",
            color: "#333333"
          },
          {
            type: "text",
            text: "‡∏Å‡∏µ‡∏¨‡∏≤, ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô, ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á, ‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á",
            wrap: true,
            size: "sm",
            color: "#666666"
          }
        ]
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®",
            wrap: true,
            size: "sm",
            align: "center",
            color: "#888888",
            margin: "md"
          }
        ]
      }
    }
  };

  await client.replyMessage(event.replyToken, categorizedActivityFlex);
  return;
}


if (userMessage === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î') {
  userSessions[userId] = { step: 0, answers: [] };
  const question = buildQuestionFlex(0);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö + ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å‡πÉ‡∏ô replyMessage ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  await client.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: `üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n\n` +
        `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‚ú® ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏Ç‡πâ‡∏≠\n` +
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä\n\n` +
        `‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß... ‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! üöÄ`
    },
    ...(Array.isArray(question) ? question : [question])
  ]);
  return;
}

// ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î
if (userSessions[userId]) {
  const session = userSessions[userId];

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (step ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  session.answers[session.step] = userMessage;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° step ‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  session.step++;

  if (session.step < questions.length) {
    const nextQuestion = buildQuestionFlex(session.step);

    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô replyMessage ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    await client.replyMessage(event.replyToken, Array.isArray(nextQuestion) ? nextQuestion : [nextQuestion]);
  } else {
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const result = analyzeAnswers(session.answers);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á flex message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const flexResult = {
      type: "flex",
      altText: "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      contents: {
        type: "bubble",
        size: "mega",
        body: {
          type: "box",
          layout: "vertical",
          spacing: "lg",
          contents: [
            {
              type: "text",
              text: "üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î",
              weight: "bold",
              size: "lg",
              color: "#1DB446",
            },
            {
              type: "separator",
              margin: "md",
              color: "#666666"
            },
            {
              type: "box",
              layout: "vertical",
              spacing: "sm",
              margin: "lg",
              contents: [
                {
                  type: "text",
                  text: "üìå ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
                  size: "md",
                  weight: "bold",
                  color: "#333333"
                },
                {
                  type: "text",
                  text: result.bestTrack || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ",
                  size: "md",
                  weight: "bold",
                  color: "#0D99FF",
                  wrap: true
                }
              ]
            },
            {
              type: "box",
              layout: "vertical",
              spacing: "sm",
              margin: "lg",
              contents: [
                {
                  type: "text",
                  text: "üí° ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                  size: "md",
                  weight: "bold",
                  color: "#333333"
                },
                {
                  type: "text",
                  text: result.traits.length > 0 ? result.traits.join(', ') : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                  wrap: true,
                  color: "#555555"
                }
              ]
            },
            {
              type: "box",
              layout: "vertical",
              spacing: "sm",
              margin: "lg",
              contents: [
                {
                  type: "text",
                  text: "üìé ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
                  size: "md",
                  weight: "bold",
                  color: "#333333"
                },
                {
                  type: "text",
                  text: "‡∏•‡∏≠‡∏á‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï üòä",
                  wrap: true,
                  color: "#555555"
                }
              ]
            }
          ]
        },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üíö",
          size: "sm",
          align: "center",
          color: "#888888",
          margin: "md"
        },
        {
          type: "button",
          action: {
            type: "message",
            label: "üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà",
            text: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î"
          },
          style: "primary",
          color: "#1DB446",
          margin: "md"
        }
      ]
    }
  }
};
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô replyMessage ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    await client.replyMessage(event.replyToken, flexResult);

    // ‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö
    delete userSessions[userId];
  }
  return;
}


if (userMessage === '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡∏°‡πà') {
  let session = await Session.findOne({ sessionId: sessionId });

  if (session && session.name && session.grade && session.educationLevel) {
    session.abilitiesInputText = '';
    session.recommendations = [];

    await session.save();

    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: `üîÑ ‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞!\n\n` +
            `üë§ ‡∏ä‡∏∑‡πà‡∏≠ : ${session.name}\n` +
            `üìö ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ : ${session.educationLevel}\n` +
            `üìä ‡πÄ‡∏Å‡∏£‡∏î : ${session.grade}\n\n` +
            `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Ñ‡∏ì‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô üß†‚ú®`
    });
    return;
  } else {
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ üí¨'
    });
    return;
  }
}

if (userMessage.startsWith("üìö ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")) {
  const lines = userMessage.split("\n");
  const facultyName = lines[1].replace("üèõÔ∏è ‡∏Ñ‡∏ì‡∏∞ : ", "").trim();
  const majorName = lines[2].replace("üìò ‡∏™‡∏≤‡∏Ç‡∏≤ : ", "").trim();

    const session = await getSession(event.source.userId);
    const rec = session?.recommendations?.find(
      r => r.faculty === facultyName && r.major === majorName
    );

    if (!rec) {
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞"
      });
      return;
    }
 const planCard = createPlanCard(facultyName, majorName, rec);

    await client.replyMessage(event.replyToken, {
      type: "flex",
      altText: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
      contents: planCard
    });
     return;
  }


  if (userMessage.startsWith("üóÇÔ∏è ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")) {
    const lines = userMessage.split("\n");
    const facultyName = lines[1].replace("üèõÔ∏è ‡∏Ñ‡∏ì‡∏∞ : ", "").trim();
    const majorName = lines[2].replace("üìò ‡∏™‡∏≤‡∏Ç‡∏≤ : ", "").trim();
  
    // ‡∏´‡∏≤ faculty ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• faculties
    const matchedFaculty = faculties.find(f => f.name === facultyName);
    if (!matchedFaculty) {
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏∞"
      });
      return;
    }
  
    // ‡∏´‡∏≤ major ‡πÉ‡∏ô faculty
    const matchedMajor = matchedFaculty.majors.find(m => m.name === majorName);
    if (!matchedMajor) {
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡πà‡∏∞"
      });
      return;
    }
  
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏´‡∏°
    if (!matchedMajor.studyPlan || matchedMajor.studyPlan.length === 0) {
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞"
      });
      return;
    }
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á rec ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô matchedMajor
    const rec = {
      studyPlan: matchedMajor.studyPlan,
      studyPlanPdf: matchedMajor.studyPlanPdf || null,
      studyPlanInfoImg: matchedMajor.studyPlanInfoImg || null
    };
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex card
    const planCard = createPlanCard(facultyName, majorName, rec);
  
    await client.replyMessage(event.replyToken, {
      type: "flex",
      altText: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
      contents: planCard
    });
  
    return;
  }  

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ number
const safeText = (text) => {
  if (typeof text === 'string' && text.trim() !== '') return text;
  if (typeof text === 'number') return text.toString();
  return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
};

const safeArray = (arr) =>
  Array.isArray(arr) && arr.length > 0 ? arr : ['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'];

// STEP 1: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤" -> ‡πÅ‡∏™‡∏î‡∏á Flex Message ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞
if (userMessage === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤') {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á bubbles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ì‡∏∞ (‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏™‡∏•‡∏±‡∏ö‡∏ü‡πâ‡∏≤/‡∏ä‡∏°‡∏û‡∏π)
  const facultyBubbles = faculties.map((faculty, index) => ({
    type: "bubble",
    size: "micro",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
      {
        type: "text",
        text: faculty.name,   // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        weight: "bold",
        size: "sm",
        wrap: true,
        align: "center"
      }
    ],      
      paddingAll: "10px",
      spacing: "sm"
    },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          style: "primary",
          color: index % 2 === 0 ? "#1E90FF" : "#FF69B4",
          action: {
            type: "message",
            label: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å üéØ`,
            text: faculty.name
          }
        }
      ],
      paddingAll: "10px",
      spacing: "sm"
    }
  }));

  await client.replyMessage(event.replyToken, [
    {
      type: 'text',
      text: 'üôè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòä\n‚û°Ô∏è ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ'
    },
    {
      type: "flex",
      altText: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à",
      contents: {
        type: "carousel",
        contents: facultyBubbles
      }
    }
  ]);
  return;
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡πà‡∏á array ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10
function chunkArray(array, size = 10) {
  const result = [];
  for (let i = 0; i < array.length; i += size) {
    result.push(array.slice(i, i + size));
  }
  return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤
function createMajorFlexMessage(faculty, page = 1) {
  const majorEmojiMap = {
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå": "üíª",
    "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°": "‚öôÔ∏è",
    "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå": "üè•",
    "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à": "üíº",
    "‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå": "üé®",
    "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤": "üìö",
    "‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå": "üåç",
    "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢": "üó£Ô∏è",
    "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "üî¨",
    "‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢": "‚öñÔ∏è",
  };

  const chunks = chunkArray(faculty.majors, 10);
  const majors = chunks[page - 1];
  if (!majors) return null;

  const bubbles = majors.map((major, index) => {
    let emoji = "";
    for (const key in majorEmojiMap) {
      if (major.name.includes(key)) {
        emoji = majorEmojiMap[key];
        break;
      }
    }

    return {
      type: "bubble",
      size: "micro",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: `${emoji ? emoji + " " : ""}${major.name}`,
            weight: "bold",
            size: "sm",
            wrap: true,
            align: "center"
          }
        ],
        paddingAll: "10px",
        spacing: "sm"
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "primary",
            color: index % 2 === 0 ? "#FFA500" : "#32CD32",
            action: {
              type: "message",
              label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å üìñ",
              text: major.name
            }
          }
        ],
        paddingAll: "10px",
        spacing: "sm"
      }
    };
  });

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
  if (page < chunks.length) {
    bubbles.push({
      type: "bubble",
      size: "micro",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "‚û°Ô∏è ‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
            align: "center",
            weight: "bold"
          }
        ]
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "secondary",
            action: {
              type: "message",
              label: "‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
              text: `‚û°Ô∏è ‡∏î‡∏π‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° \n‡∏´‡∏ô‡πâ‡∏≤ ${page + 1} ‡∏Ç‡∏≠‡∏á üéì ${faculty.name}`
            }
          }
        ]
      }
    });
  }

  return {
    type: "flex",
    altText: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô "${faculty.name}" ‡∏´‡∏ô‡πâ‡∏≤ ${page}`,
    contents: {
      type: "carousel",
      contents: bubbles
    }
  };
}

// STEP 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:{‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞}:{‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà}"
const regex = /^‚û°Ô∏è ‡∏î‡∏π‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\s*\n\s*‡∏´‡∏ô‡πâ‡∏≤\s*(\d+)\s*‡∏Ç‡∏≠‡∏á\s*üéì\s*(.+)$/;
const match = userMessage.match(regex);
if (match) {
  const page = parseInt(match[1]);
  const facultyName = match[2];
  const faculty = faculties.find(f => f.name === facultyName);
  if (faculty) {
    const flexMsg = createMajorFlexMessage(faculty, page);
    if (flexMsg) {
      await client.replyMessage(event.replyToken, flexMsg);
    } else {
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üòä"
      });
    }    
    return;
  }
}

// STEP 3: ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô "‡∏Ñ‡∏ì‡∏∞‡∏Ñ‡∏£‡∏∏‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå")
const selectedFaculty = faculties.find(f => f.name === userMessage);
if (selectedFaculty) {
  // ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô
  await client.replyMessage(event.replyToken, {
    type: "text",
    text: `üéì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô "${selectedFaculty.name}" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üòä`
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 1
  const flexMsg = createMajorFlexMessage(selectedFaculty, 1);
  if (flexMsg) {
    await client.pushMessage(event.source.userId, flexMsg);
  }
  return;
}

// STEP 3: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤
let matchedMajor, matchedFaculty;
for (const faculty of faculties) {
  const found = faculty.majors.find(m => m.name === userMessage);
  if (found) {
    matchedMajor = found;
    matchedFaculty = faculty;
    break;
  }
}

if (matchedMajor) {
  const gradeText = safeText(matchedMajor?.grade);
  const conditionText = safeText(matchedMajor?.condition);
  const abilityText = safeArray(matchedMajor?.ability).join(", ");
  const quotaText = safeText(matchedMajor?.quota);
  const careersArray = safeArray(matchedMajor?.careers);
  const facultyName = safeText(matchedFaculty?.name);
  const majorName = safeText(matchedMajor?.name);

  const careersContents = careersArray.map(career => ({
    type: "text",
    text: `‚Ä¢ ${career}`,
    size: "sm",
    wrap: true
  }));

  const bubble = {
    type: "bubble",
    size: "mega",
    hero: {
      type: "image",
      url: safeText(matchedMajor?.logoUrl) || "https://www.uru.ac.th/images/logouru2011.png",
      size: "full",
      aspectRatio: "1.51:1",
      aspectMode: "fit"
    },
      header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: `üìö ${safeText(matchedFaculty?.name)}`,
          weight: "bold",
          size: "lg",
          wrap: true
        },
        {
          type: "text",
          text: `üìò ‡∏™‡∏≤‡∏Ç‡∏≤${safeText(matchedMajor?.name)}`,
          weight: "bold",
          size: "md",
          wrap: true
        }
      ]
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
        // ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        { type: "text", text: "üìä ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", size: "sm", weight: "bold", margin: "md" },
        { type: "text", text: gradeText, size: "sm", wrap: true },

        // ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
        { type: "text", text: "üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ", size: "sm", weight: "bold", margin: "md" },
        { type: "text", text: abilityText, size: "sm", wrap: true },

        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
        { type: "text", text: "‚úçÔ∏è ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", size: "sm", weight: "bold", margin: "md" },
        { type: "text", text: quotaText, size: "sm", wrap: true },

        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
        { type: "text", text: "üìù ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", size: "sm", weight: "bold", margin: "md" },
        { type: "text", text: conditionText, size: "sm", wrap: true },

        // ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
        { type: "text", text: "üéØ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï", size: "sm", weight: "bold", margin: "md" },
        ...careersContents,

        // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
        { type: "text", text: "üîó ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£", size: "sm", weight: "bold", wrap: true, margin: "md" },
        {
          type: "box",
          layout: "horizontal",
          spacing: "sm",
          contents: [
            {
              type: "box",
              layout: "vertical",
              flex: 1,
              spacing: "xs",
              contents: [
                {
                  type: "button",
                  style: "link",
                  height: "sm",
                  action: {
                    type: "uri",
                    label: "üåê",
                    uri: safeText(matchedMajor?.website) || "https://edu.uru.ac.th/"                  }
                },
                {
                  type: "text",
                  text: "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
                  align: "center",
                  size: "xs",
                  wrap: true
                }
              ]
            },
            {
              type: "box",
              layout: "vertical",
              flex: 1,
              spacing: "xs",
              contents: [
                {
                  type: "button",
                  style: "link",
                  height: "sm",
                  action: {
                    type: "uri",
                    label: "üìò",
                    uri: safeText(matchedMajor?.majorsFacebook) || "https://www.facebook.com/"                  }
                },
                {
                  type: "text",
                  text: "‡∏™‡∏≤‡∏Ç‡∏≤",
                  align: "center",
                  size: "xs",
                  wrap: true
                }
              ]
            },
            {
              type: "box",
              layout: "vertical",
              flex: 1,
              spacing: "xs",
              contents: [
                {
                  type: "button",
                  style: "link",
                  height: "sm",
                  action: {
                    type: "uri",
                    label: "üèõÔ∏è",
                    uri: safeText(matchedMajor?.facultyFacebook) || "https://www.facebook.com/"                  }
                },
                {
                  type: "text",
                  text: "‡∏Ñ‡∏ì‡∏∞",
                  align: "center",
                  size: "xs",
                  wrap: true
                }
              ]
            }
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "horizontal",
      contents: [
        {
          type: "button",
          style: "secondary",
          action: {
            type: "message",
            label: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
            text: `üóÇÔ∏è ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\nüèõÔ∏è ‡∏Ñ‡∏ì‡∏∞ : ${facultyName}\nüìò ‡∏™‡∏≤‡∏Ç‡∏≤ : ${majorName}`
          }
        },    
        {
          type: "button",
          style: "primary",
          action: {
            type: "message",
            label: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
            text: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤"
          }
        }
      ]
    }
  };

console.log("‚úÖ Bubble Payload:", JSON.stringify(bubble, null, 2));

await client.replyMessage(event.replyToken, [
  {
    type: "text",
    text: `üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞\n\nüè´ ${safeText(matchedFaculty?.name)}\nüéì ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤${safeText(matchedMajor?.name)}`
  },
  {
    type: "flex",
    altText: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ ${safeText(matchedMajor?.name)}`.slice(0, 400),
    contents: bubble
  }
]);
  return;  
}

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Intent ‡∏à‡∏≤‡∏Å Dialogflow
          const dialogflowResult = await detectIntentText(sessionId, userMessage);
          const replyText = dialogflowResult.fulfillmentText || '‚ùó ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞  \n‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ  \n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä';

          // <--- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á carousel --->
          if (dialogflowResult.intent && dialogflowResult.intent.displayName === 'get skills') {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏à‡∏≤‡∏Å MongoDB
            const session = await getSession(sessionId);

          if (session && session.recommendations && session.recommendations.length > 0) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô carousel
          const introText = `üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì${session.name || ''} ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ\n\n` +
                  `üéì ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ : ${session.educationLevel || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n` +  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                  `üìò ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ : ${session.grade}\n` +
                  `üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${session.abilitiesInputText}\n\n` +
                  `üéØ ‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì 5 ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üëá`;
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message carousel
const bubbles = session.recommendations.map((rec) => {
const facultyName = rec.faculty || "";
const majorName = rec.major || "";
  return {
    type: "bubble",
    size: "mega",
    hero: {
      type: "image",
      url: rec.logoUrl || "https://www.uru.ac.th/images/logouru2011.png",
      size: "full",
      aspectRatio: "1.51:1",
      aspectMode: "fit"
    },
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: `üéì ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${rec.rank}`,
          weight: "bold",
          color: "#1DB446",
          size: "lg"
        },
        {
          type: "text",
          text: rec.faculty,
          weight: "bold",
          size: "md",
          wrap: true,
          margin: "sm"
        },
        {
          type: "text",
          text: `üè´ ‡∏™‡∏≤‡∏Ç‡∏≤${rec.major}`,
          weight: "bold",
          size: "sm",
          wrap: true
        }
      ]
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
        {
          type: "text",
          text: "üìä ‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.requiredGrade !== null ? `${rec.requiredGrade}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.abilities?.length > 0 ? `${rec.abilities.join(", ")}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.matchedAbilities?.length > 0 ? `${rec.matchedAbilities.join(", ")}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "üë• ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.quota ? `${rec.quota} ‡∏Ñ‡∏ô` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "üìÑ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.condition || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
          size: "sm",
          weight: "bold",
          wrap: true,
          margin: "md"
        },
        {
          type: "text",
          text: rec.reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          size: "sm",
          wrap: true,
          margin: "xs"
        },
        {
          type: "text",
          text: "üíº ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
          weight: "bold",
          margin: "md",
          size: "sm"
        },
        ...(rec.careers?.length > 0
          ? rec.careers.map(career => ({
              type: "text",
              text: `‚Ä¢ ${career}`,
              size: "sm",
              margin: "xs",
              wrap: true
            }))
          : [
              {
                type: "text",
                text: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                size: "sm",
                margin: "xs"
              }
            ]),
{
  type: "text",
  text: "üîó ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£",
  size: "sm",
  weight: "bold",
  wrap: true,
  margin: "md"
},
{
  type: "box",
  layout: "horizontal",
  spacing: "sm",
  contents: [
    {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          style: "link",
          height: "sm",
          action: {
            type: "uri",
            label: "üåê",
            uri: rec.website || "https://edu.uru.ac.th/"
          }
        },
        {
          type: "text",
          text: "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
          align: "center",
          size: "xs",
          wrap: true
        }
      ],
      flex: 1,
      spacing: "xs"
    },
    {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          style: "link",
          height: "sm",
          action: {
            type: "uri",
            label: "üìò",
            uri: rec.majorsFacebook || "https://www.facebook.com/"
          }
        },
        {
          type: "text",
          text: "‡∏™‡∏≤‡∏Ç‡∏≤",
          align: "center",
          size: "xs",
          wrap: true
        }
      ],
      flex: 1,
      spacing: "xs"
    },
    {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          style: "link",
          height: "sm",
          action: {
            type: "uri",
            label: "üèõÔ∏è",
            uri: rec.facultyFacebook || "https://www.facebook.com/"
          }
        },
        {
          type: "text",
          text: "‡∏Ñ‡∏ì‡∏∞",
          align: "center",
          size: "xs",
          wrap: true
        }
      ],
      flex: 1,
      spacing: "xs"
    }
  ]
  }
  ]
    },
  footer: {
  type: "box",
  layout: "horizontal",
  spacing: "sm",
  contents: [
    {
      type: "button",
      style: "secondary",
      action: {
        type: "message",
        label: "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        text: `üìö ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\nüèõÔ∏è ‡∏Ñ‡∏ì‡∏∞ : ${facultyName}\nüìò ‡∏™‡∏≤‡∏Ç‡∏≤ : ${majorName}`
      }
    },
    {
      type: "button",
      style: "primary",
      action: {
        type: "message",
        label: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
        text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡∏°‡πà"
      }        }
      ]
    }
  };
});

await client.replyMessage(event.replyToken, [
  {
    type: "text",
    text: introText
  },
  {
    type: "flex",
    altText: "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤",
    contents: {
      type: "carousel",
      contents: bubbles
    },
  },
]);
  return;  // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ã‡πâ‡∏≥
              } else {
              // ‡∏Å‡∏£‡∏ì‡∏µ session ‡πÑ‡∏°‡πà‡∏°‡∏µ recommendations
              await client.replyMessage(event.replyToken, {
                type: "text",
                text: "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üôá‚Äç‚ôÄÔ∏è"
              });
              return;
            }
          }
             // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
          await client.replyMessage(event.replyToken, {
            type: 'text',
            text: replyText,
          });
        }
      }));

      res.status(200).send('OK');
    } catch (err) {
      console.error(err);
      res.status(500).send('Error');
    }
  }
);
// --- ‡∏à‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î LINE bot ---

app.listen(PORT, () => {
  console.log(`‚úÖ Server running at http://localhost:${PORT}`);
});